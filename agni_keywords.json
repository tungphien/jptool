{"keywords": ["capture commands output", "verify chassis fpc state online", "verify chassis fpc pic status online", "verify pfe terse state online", "verify chassis sfb or sibs state online", "show version for stand-alone and dual re", "core-dumps for stand-alone and dual re", "show chassis environment", "should be true", "get handle", "get_interface_appended_with_unit_number", "evaluate", "check cpu usage", "get physical interface name", "sleep", "get link list of minimum links configured for specific ae", "get length", "delete set command creation for interfaces", "execute config command on device", "should contain", "get all ip destinations from lldp local interfaces", "verify ping", "execute cli command on device", "log messages for routing", "verify syslog error messages", "verify custom syslog error messages", "should be equal", "should not be equal", "reboot device", "get ssh default configs", "get delete ssh default configs", "execute ssh default configs", "connect to device", "check connect to device multiple times", "catenate", "get model for device", "return telnet configured groups name", "execute shell command on device", "should not contain any", "get current controller name", "set variable", "get month and day", "get lines matching pattern", "restart process", "should match", "upload file", "download file", "return file copy cli", "command check copied file", "check file size greater than zero", "return ssh configured groups name", "snmp statistics on snmp server", "get regexp matches", "get from list", "verify_get_ae_interface_list", "set test variable", "should be equal as strings", "should contain any", "remove add ntp server", "connect to device via python", "get device contains blk state and alt role", "get root bridge device", "remove values from list", "convert to uppercase", "lists should be equal", "add time to date", "split string", "remove from list", "reconnect to device", "flap interface", "verify northstar", "get northstar", "get interfaces contains cascade", "check ping connection", "switch to superuser", "get current date", "verify interface is down during the hold time", "should match regexp", "delete set command creation for routing interfaces", "sum of list elements", "compare lag speed with mem link speed", "get ifd name", "calculate pps for each member link", "aggregate of list elements", "check for equal load balance", "create list", "check lacp stats flow", "deactivate specified ae interface", "activate specified ae interface", "stop ixia traffic items", "stream based start traffic", "clear and check ixia traffic statistics ecmp", "stream based stop traffic", "start ixia traffic items", "get lower tolerance", "get upper tolerance", "convert threshold", "get bandwidth number", "get traffic rate", "modify traffic rate for stream", "get address family from nlri_type_session", "stop ixia protocols", "start specific bgp emulation", "stop specific bgp emulation", "confirm_traffic_drops", "get cp dp convergence", "get iso addresses without selectors", "get traffic flwng device handle for all", "get trffic flowing device handle", "get traffic flwng device", "get non traffic flwng devices", "get traffic flwng interfaces", "get non traffic flwng interfaces", "execute particular group show cmd", "get time and index of traffic flowing device", "get time string", "get differance in time between commits", "get index from list", "add interface to interface list", "get interface by appending zero to interface", "get intrfc appended with zero", "check traffic on device where timeout is added", "get the position of the modified as", "bfd session count", "show chassis fpc cpu utilization", "list should not contain value", "detect core on junos device", "should not be true", "steady state checks", "check bgp summary output has ip and state as established", "check bgp summary output and get bgp rib name", "get interface name from tcpdump", "start tcpdump", "get processid and kill process", "stop tcpdump", "create set multiple applications protocol tcp", "create a address set with 1024 individual address", "create a set policy for 5000 application", "generate a command set with 5000 address book objects to a specific file", "check count for lines matching regexp", "get interface and vlan new list", "get compare message of vlan", "check interface with vlan present in the output", "check ntp configuration", "check ntp server ip address", "list should contain sub list", "check ntp status refid", "check time got synced from ntp", "get ip separated with slash", "get server link ip", "get server mac address", "snmp statistics on snmp server packet check", "get ike exchange type", "replace string", "get dh group name", "get encryption algorithm name", "get fragment state and check traffic stats", "get ipsec index ids", "get protocol name", "get all the ethernet interfaces", "check error message for ethernet interface", "append to list", "get line", "verify snmp output with device output", "run keyword if", "convert date", "subtract time from date", "kill daemon", "deactivate activate config", "disable enable config", "set delete config", "telemetry", "get master re name", "identifying backup re", "upgrade backup re and wait until it goes to present state", "upgrade master re", "verify and switch master"], "content": {"capture commands output": "Capture Commands Output", "verify chassis fpc state online": "Verify Chassis Fpc State Online", "verify chassis fpc pic status online": "Verify Chassis Fpc Pic Status Online", "verify pfe terse state online": "Verify Pfe Terse State Online", "verify chassis sfb or sibs state online": "Verify Chassis Sfb Or Sibs State Online", "show version for stand-alone and dual re": "Show Version For Stand-alone And Dual Re", "core-dumps for stand-alone and dual re": "Core-dumps For Stand-alone And Dual Re  device=${device}", "show chassis environment": "Show Chassis Environment", "should be true": "\"Should Be True     ${time_before_set} < ${time_after_set_ntp}\"", "get handle": "${dh}    Get Handle    resource=${device}", "get_interface_appended_with_unit_number": "${intrfc_with_vlan_id}    Get_interface_Appended_with_unit_number   interface=${interface}  unit_num=${vlan_id}", "evaluate": "${time_after_set_ntp_list_type}    Evaluate  type($time_after_set_ntp_list).__name__", "check cpu usage": "check cpu usage", "get physical interface name": "Get Physical Interface Name", "sleep": "Sleep    60", "get link list of minimum links configured for specific ae": "Get Link list Of Minimum links Configured for Specific AE", "get length": "${length}    Get Length    ${deactivate_activate_static_lsp_list}", "delete set command creation for interfaces": "${cmdlist}    Delete Set Command Creation For Interfaces    action=delete", "execute config command on device": "${response}    Execute Config Command On Device    ${device_handle}    command=commit", "should contain": "Should Contain    ${response}    0% packet loss", "get all ip destinations from lldp local interfaces": "${final_ip_destinations_list}    Get All IP Destinations From Lldp Local Interfaces    device=${device}    lldp_local_interfaces=${lldp_local_interfaces_list}", "verify ping": "Verify Ping    device=${device}    final_ip_destinations_list=${final_ip_destinations_list}", "execute cli command on device": "${response}    Execute Cli Command On Device    ${dh}    command=ping ${host_name} rapid    timeout=${10}", "log messages for routing": "Log Messages For Routing    device=${device}    line_count=0", "verify syslog error messages": "Verify Syslog Error Messages    device=${device}", "verify custom syslog error messages": "Verify Custom Syslog Error Messages    device=${device}    msg=${custom_err_message}", "should be equal": "Should be equal    ${options2_value}    ${None}", "should not be equal": "Should not be equal       ${tcp_receive}   ${tcp_receive_after_wait}", "reboot device": "${status}   Reboot device    ${dh}   mode=cli   wait=180    all=True     timeout=360    interval=40", "get ssh default configs": "Get Ssh Default Configs", "get delete ssh default configs": "Get Delete Ssh Default Configs", "execute ssh default configs": "Execute Ssh Default Configs", "connect to device": "Connect to device    host=${device_ip}    connect_mode=ssh    user=${tacacs_device_login_user_name}    password=${tacacs_device_login_password}", "check connect to device multiple times": "Check connect to device multiple times    connect_mode=ssh", "catenate": "${ip_port} =  Catenate    SEPARATOR=.    ${host_ip}    22", "get model for device": "Get Model For Device", "return telnet configured groups name": "Return telnet configured groups name", "execute shell command on device": "${snmp_response}    Execute Shell Command On Device    ${server_handle}    command=snmpwalk -v2c -c ${snmp_community_name} ${device_ip} ${snmp_oid}    timeout=${120}", "should not contain any": "Should Not Contain Any    ${response}    Timeout: No Response", "get current controller name": "${controller}=    Get Current Controller Name    ${dh}", "set variable": "\"${device_ip}=    Set Variable    ${tv[${device}__${controller}__mgt-ip]}\"", "get month and day": "${res}    Get Month and Day    test=${response}", "get lines matching pattern": "Get Lines Matching Pattern    pattern=jnxJsSPUMonitoringMemoryUsage.\\\\d+\\\\s+\\\\=\\\\s+\\\\d+    match_count=1    log_op=${response}", "restart process": "Restart Process", "should match": "Should Match    ${snmp}    SNMP*", "upload file": "Upload File    ${dh}    local_file=/var/tmp/5000_address_book_objects.txt    remote_file=/var/tmp/5000_address_book_objects.txt", "download file": "Download File", "return file copy cli": "Return File Copy Cli", "command check copied file": "Command check copied file", "check file size greater than zero": "Check File Size Greater Than Zero", "return ssh configured groups name": "Return ssh configured groups name", "snmp statistics on snmp server": "Snmp statistics on snmp server", "get regexp matches": "${packet_loss_list}    Get Regexp Matches    ${output}    (\\\\d+).\\\\s+packet    1", "get from list": "${time_before_set}    Get From List    ${time_before_set_list}    0", "verify_get_ae_interface_list": "Verify_get_ae_interface_list", "set test variable": "Set Test Variable    ${iteration_timeout}     600", "should be equal as strings": "Should Be Equal As Strings               ${snmpwalk_before_reboot}    ${snmpwalk_after_reboot}", "should contain any": "Should Contain Any    ${response}    ${device_username}    ${hostname}    run show chassis l3-ha-mode fabric status", "remove add ntp server": "Remove Add NTP Server    device=${device}", "connect to device via python": "Connect To Device Via Python    dh=${server_handle}    host_ip=${device_ip}    user_name=${device_user}    password=${device_password}", "get device contains blk state and alt role": "Get Device Contains BLK State And ALT Role    device_list=${device_list}", "get root bridge device": "Get Root Bridge Device    device_list=${device_list}", "remove values from list": "Remove Values From List    ${device_list}    ${root_device}", "convert to uppercase": "${cipher_suite}   Convert To Uppercase   gcm-aes-xpn-128", "lists should be equal": "Lists Should Be Equal    ${swap_label_list}    ${index_list}", "add time to date": "${current_date_time} =  Add Time To Date      ${current_date_time}    00:02:00", "split string": "@{words} =  Split String    ${added_time}", "remove from list": "${added_time} =  Remove From List    ${words}    0", "reconnect to device": "Reconnect To Device    ${dh}", "flap interface": "Flap Interface", "verify northstar": "Verify NorthStar    device_handle=${northstar_api_handle}    address=${ifa_address}    operator=is-equal    value=${metric}    check=specificlinkdata_get:metric_for_link", "get northstar": "${return_value}    Get NorthStar    device_handle=${northstar_api_handle}    info=facilities_get:elements", "get interfaces contains cascade": "Get Interfaces Contains Cascade    device=${device}", "check ping connection": "Check Ping Connection    device=${device_handle}    destination=${ipv6_destination}    source=${ipv6_source}", "switch to superuser": "Switch To Superuser    ${dh}    password=${password}", "get current date": "${start_time}=    Get Current Date    exclude_millis=true", "verify interface is down during the hold time": "Verify Interface Is Down During The Hold Time    dh=${dh}    interface=${interface}    start_time=${start_time}    during_time_in_milliseconds=${hold_time_up}", "should match regexp": "Should Match Regexp   ${response2}    RT_FLOW - RT_FLOW_SESSION_CREATE.*source-address=\"${host_address}\".*destination-address=\"${destination_address}\"", "delete set command creation for routing interfaces": "Delete Set Command Creation For Routing Interfaces", "sum of list elements": "Sum Of List Elements", "compare lag speed with mem link speed": "Compare Lag Speed With Mem Link Speed", "get ifd name": "Get Ifd Name", "calculate pps for each member link": "Calculate PPS For Each Member Link", "aggregate of list elements": "Aggregate Of List Elements", "check for equal load balance": "Check For Equal Load Balance", "create list": "${snmp_config_list}    Create List    set snmp location ${snmp_location}    set snmp contact ${snmp_contact}    set snmp trap-options source-address ${device_ip}    set snmp community ${snmp_community_name} authorization read-only    set snmp community ${snmp_community_name} clients 0.0.0.0/0 restrict    set snmp trap-group ${snmp_community_name} version all", "check lacp stats flow": "Check Lacp Stats Flow", "deactivate specified ae interface": "Deactivate Specified AE Interface    ${device}    ${interface}", "activate specified ae interface": "Activate Specified AE Interface    ${device}    ${interface}", "stop ixia traffic items": "Stop Ixia Traffic Items", "stream based start traffic": "Stream Based Start Traffic", "clear and check ixia traffic statistics ecmp": "Clear And Check Ixia Traffic Statistics ecmp       match_list=${match_list}", "stream based stop traffic": "Stream Based Stop Traffic", "start ixia traffic items": "Start Ixia Traffic Items", "get lower tolerance": "Get Lower Tolerance", "get upper tolerance": "Get Upper Tolerance", "convert threshold": "${threshold}    Convert Threshold    threshold=${adjust_threshold_absolute}", "get bandwidth number": "${new_device_bandwidth}    Get bandwidth number    rate=${device_bandwidth}", "get traffic rate": "${traffic_rate}    Get Traffic Rate    rate=${maximum_bandwidth}    flag=1", "modify traffic rate for stream": "Modify Traffic Rate For Stream    match_list=${ixia_stream_name_list}    traffic_rate=${traffic_rate[0]}", "get address family from nlri_type_session": "get address family from nlri_type_session", "stop ixia protocols": "Stop Ixia Protocols", "start specific bgp emulation": "Start Specific BGP Emulation", "stop specific bgp emulation": "Stop Specific BGP Emulation", "confirm_traffic_drops": "confirm_traffic_drops", "get cp dp convergence": "Get CP DP Convergence", "get iso addresses without selectors": "Get ISO Addresses Without Selectors    iso_address_list=${nsap_address_list}", "get traffic flwng device handle for all": "${dvc_hndl_list}  Get Traffic flwng Device Handle For All  device_list=${device_list} ", "get trffic flowing device handle": "${index}  Get Trffic Flowing Device Handle  device_list=${device_list}  interface_list=${interface_list}   expected_traffic=${expected_traffic}", "get traffic flwng device": "${traffic_flowing_device}  Get Traffic flwng Device  device_list=${non_traffic_flowing_device_list}  index=${index}", "get non traffic flwng devices": "${non_traffic_flowing_device_list}  Get Non Traffic flwng Devices  device_list=${device_list}  dut=${traffic_flowing_device}", "get traffic flwng interfaces": "${traffic_flowing_intrfc}  Get Traffic flwng Interfaces  interface_list=${interface_list}  index=${index}", "get non traffic flwng interfaces": "${non_traffic_flowing_intrfc_list}  Get Non Traffic flwng Interfaces  interface_list=${interface_list}  index=${index}", "execute particular group show cmd": "Execute Particular Group Show Cmd  dh=${traffic_flowing_device_handle_before_timeout}  system_related_cli=${system_related_cli_boolean}    isis_ospf_ldp_cli=${isis_ospf_ldp_cli_boolean}    bgp_mpls_cli=${bgp_mpls_cli_boolean}    bgp_mpls_realted_cmd=${bgp_mpls_realted_cmd_list}   isis_ospf_ldp_related_show_cmd=${isis_ospf_ldp_related_show_cmd_list}    system_related_cmd=${system_related_cmd_list}", "get time and index of traffic flowing device": "${result_string}  Get Time and Index of Traffic Flowing Device  device_list=${non_traffic_flowing_device_list}  interface_list=${non_traffic_flowing_intrfc_list}  expected_traffic=${expected_traffic}  sleep_timeout=${expected_time_to_shift_traffic}", "get time string": "${result_str}  Get Time String  list_of_string_and_index=${result_string}", "get differance in time between commits": "${time_taken_to_shift_traffic}  Get Differance In Time Between Commits  commit1=${response1}  commit2=${result_str}", "get index from list": "${index}  Get Index From List  list_of_string_and_index=${result_string}", "add interface to interface list": "${non_traffic_flowing_intrfc_list}  Add Interface To Interface List  interface_list1=${non_traffic_flowing_intrfc_list}  interface=${traffic_flowing_intrfc_before_timeout}", "get interface by appending zero to interface": "${non_trfc_flwing_interface_with_zero_list}  Get Interface By Appending Zero To Interface  interface_list=${non_traffic_flowing_intrfc_list}", "get intrfc appended with zero": "${trfc_flwing_interface_with_zero}    Get Intrfc Appended With Zero     interface=${traffic_flowing_intrfc}", "check traffic on device where timeout is added": "Check Traffic On Device Where Timeout Is Added    dh=${traffic_flowing_device_handle_before_timeout}   interface=${traffic_flowing_intrfc_before_timeout}   expected_traffic=${expected_traffic}    timeout=${expected_time_to_shift_traffic}", "get the position of the modified as": "Get The Position Of The Modified AS", "bfd session count": "bfd session count", "show chassis fpc cpu utilization": "show chassis fpc cpu utilization", "list should not contain value": "List Should Not Contain Value    ${interfaces_list}    ${interface_to_disable}", "detect core on junos device": "${core_status_list}=    Detect Core On Junos Device  core_path=${core_path}    resource=${device}", "should not be true": "Should Not Be True    ${core_status}", "steady state checks": "Steady State Checks", "check bgp summary output has ip and state as established": "Check bgp Summary Output Has Ip and State as Established  ip=${ip_to_check_on_northstar}   response=${response}", "check bgp summary output and get bgp rib name": "${bgp_Rib_name}  Check bgp Summary Output and get bgp Rib name   response=${response}", "get interface name from tcpdump": "${intf_name}    Get Interface Name From Tcpdump    device_handle=${dh}    ip_address=${host_address}", "start tcpdump": "${tcp_pid}    Start Tcpdump    device=${dh}    pcapfile=syslog.pcap    interface=${intf_name}    port=514", "get processid and kill process": "Get Processid and Kill Process    res=${response1}    device=${dh}", "stop tcpdump": "Stop Tcpdump    device=${dh}    pid=${tcp_pid}", "create set multiple applications protocol tcp": "Create Set Multiple Applications Protocol Tcp    application_number=100000    application_group_name=application_set_100000_application    application_name=tcp", "create a address set with 1024 individual address": "Create A Address Set With 1024 Individual Address", "create a set policy for 5000 application": "Create A Set Policy For 5000 Application", "generate a command set with 5000 address book objects to a specific file": "Generate A Command Set With 5000 Address Book Objects To A Specific File    generated_file_path=/var/tmp/5000_address_book_objects.txt", "check count for lines matching regexp": "Check Count For Lines Matching Regexp    log_op=${response}    pattern2=0\\\\s+0\\\\s+0\\\\s+0\\\\s+0\\\\s+0\\\\s+0\\\\s+0    pattern1=\\\\d+\\\\s+\\\\d+\\\\s+\\\\d+\\\\s+\\\\d+\\\\s+\\\\d+\\\\s+\\\\d+\\\\s+\\\\d+\\\\s+\\\\d+", "get interface and vlan new list": "Get Interface and vlan new List", "get compare message of vlan": "get compare message of vlan", "check interface with vlan present in the output": "check interface with vlan present in the output   interface_vlan_list=${interface_vlan_list}    dh=${dh}   msg_lst=${msg_lst}", "check ntp configuration": "Check NTP configuration", "check ntp server ip address": "Check NTP server ip address", "list should contain sub list": "${result1}   List Should Contain Sub List   ${ntp_server_ip_list}   ${refid_list}", "check ntp status refid": "Check NTP status refid", "check time got synced from ntp": "Check time got synced from NTP", "get ip separated with slash": "${ip_on_interface}  Get IP Separated with Slash  ip_with_slash=${ip_on_interface}", "get server link ip": "${ip_of_server_link}    Get Server Link Ip    ifconfig_op=${response}", "get server mac address": "${mac_of_server_link}    Get Server Mac Address   ifconfig_op=${response}", "snmp statistics on snmp server packet check": "Snmp statistics on snmp server packet check", "get ike exchange type": "Get Ike Exchange Type", "replace string": "${method} =  Replace String  ${authentication_method}  rsa  RSA", "get dh group name": "Get Dh Group Name", "get encryption algorithm name": "Get Encryption Algorithm Name", "get fragment state and check traffic stats": "Get Fragment state And Check Traffic Stats", "get ipsec index ids": "Get Ipsec Index Ids", "get protocol name": "Get Protocol Name", "get all the ethernet interfaces": "${interface_list}    Get all the ethernet interfaces     device=${device}", "check error message for ethernet interface": "Check Error Message For Ethernet Interface    device=${device}   interface_list=${interface_list}", "append to list": "Append To List    ${snmp_config_list}    set snmp trap-group ${snmp_community_name} targets ${snmp_trap_group_targets}", "get line": "${latest_modified_file}    Get Line    ${response}    1", "verify snmp output with device output": "Verify Snmp Output With Device Output      snmp_output=${snmp_response}    device_output=${device_response}", "run keyword if": "\"${time_after_set_ntp_list}=    Run Keyword If    ${time_after_set_ntp_list_type}!=list    Create List    ${time_after_set_ntp_list}\"", "convert date": "${time_setting_converted}    Convert Date    ${time_setting}    result_format=%Y%m%d%H%M.%S", "subtract time from date": "${time_setting}    Subtract Time From Date  ${time_before_set}  2d", "kill daemon": "Kill Daemon", "deactivate activate config": "Deactivate Activate config", "disable enable config": "Disable Enable config", "set delete config": "Set Delete config", "telemetry": "Telemetry    device=${device}    file_name=telemetry_components.json    log_filename=telemetry_log.log    frequency_list=${frequency_list}    port=${port}    api_port=${api_port}    path_list=${path_list}    cli_command=${cli_command}    prefix=${prefix}    key_list=${key_list}    xml_path_list=${xml_path_list}", "get master re name": "${master_RE}        Get Master Re Name      resource=${device}", "identifying backup re": "Identifying Backup RE        master_RE=${master_RE}", "upgrade backup re and wait until it goes to present state": "Upgrade Backup RE and Wait Until It Goes To Present State      ${device}       ${backup_RE}      ${image_path}       ${image_version}     ${vmhost}      ${sleep_time}", "upgrade master re": "Upgrade Master RE       ${device}      ${master_RE}     ${image_path}       ${image_version}       ${vmhost}      ${sleep_time}", "verify and switch master": "Verify and Switch Master        ${device}"}}